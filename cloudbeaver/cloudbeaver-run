#!/bin/bash

DISPLAY_NAME="cloudbeaver"
# grab the username
source /etc/profile.d/0000-env.sh
eval $(cat /etc/cont-init.d/001-userconf.sh  | grep -E "^export USER_NAME" | envsubst)
eval $(cat /etc/cont-init.d/001-userconf.sh  | grep -E "^export GROUP_NAME" | envsubst)

# https://cloudbeaver.io/docs/Server-configuration/
export CB_SERVER_NAME=${CB_SERVER_NAME:="CloudBeaver"}
export CB_SERVER_URL=${CB_SERVER_URL:="http://localhost:8978"}
export CB_ADMIN_NAME=${CB_ADMIN_NAME:=${USER_NAME}} 
export CB_ADMIN_PASSWORD=${CB_ADMIN_PASSWORD:=${PASSWORD:-"password"}}

# cloudbeaver appears to colocate config overrides and user state under one directory, called workspace
# and it doesn't seem to fully support changing workspace location:
# using XDG_DATA_HOME for both, and symlinking 
# ${CLOUDBEAVER_HOME}/workspace to ${XDG_DATA_HOME}/cloudbeaver
export CLOUDBEAVER_HOME=${CLOUDBEAVER_HOME:=/opt/cloudbeaver}
export CB_SERVER_CONF_FILE=${CB_SERVER_CONF_FILE:="${CLOUDBEAVER_HOME}/conf/cloudbeaver.conf"}
export CB_PRODUCT_CONF_FILE=${CB_PRODUCT_CONF_FILE:="${CLOUDBEAVER_HOME}/conf/product.conf"}
export CB_SERVER_WORKSPACELOCATION=${CB_SERVER_WORKSPACELOCATION:=/opt/cloudbeaver/workspace}
user_xdg_data_home=$(su - ${USER_NAME} -c 'echo $XDG_DATA_HOME')
user_workspacelocation=${user_xdg_data_home}'/cloudbeaver'
mkdir -p ${user_workspacelocation}


# updates and restarts with new containers already have a default workspace directory, 
# we need to need to make sure the workspace directory isn't present so we can create the link.
rm -rf ${CB_SERVER_WORKSPACELOCATION}
ln -sfn ${user_workspacelocation} ${CB_SERVER_WORKSPACELOCATION}

# cloudbeaver likes to overwrite the runtime file with defaults, so rooturi disappears when
# you restart.
sed -E -i "s|(workspaceLocation):.*|\1: \"${CB_SERVER_WORKSPACELOCATION:-workspace}\",|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(rootURI):.*|\1: \"${CB_SERVER_ROOTURI:-/cloudbeaver}\",|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(serviceURI):.*|\1: \"${CB_SERVER_SERVICEURI:-/api/}\",|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(expireSessionAfterPeriod):.*|\1:  ${CB_SERVER_EXPIRESESSIONAFTERPERIOD:-3600000},|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(anonymousAccessEnabled):.*|\1:  ${CB_APP_ANONYMOUSACCESSENABLED:-true},|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(anonymousAccessAllowed):.*|\1:  ${CB_APP_ANONYMOUSACCESSENABLED:-true},|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(anonymousUserRole):.*|\1:  \"${CB_APP_ANONYMOUSUSERROLE:-admin}\",|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(supportsCustomConnections):.*|\1:  ${CB_APP_SUPPORTSCUSTOMCONNECTIONS:-true},|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(publicCredentialsSaveEnabled):.*|\1:  ${CB_APP_PUBLICCREDENTIALSSAVEENABLED:-true},|g" ${CB_SERVER_CONF_FILE}
sed -E -i "s|(adminCredentialsSaveEnabled):[^,]*|\1:  ${CB_APP_ADMINCREDENTIALSSAVEENABLED:-true}|g" ${CB_SERVER_CONF_FILE}



# populate runtime files
mkdir -p ${CB_SERVER_WORKSPACELOCATION}/.data
chown -R ${USER_NAME}:${GROUP_NAME} ${CLOUDBEAVER_HOME} ${user_workspacelocation}

# populate the .cloudbeaver.runtime.conf file
cloudbeaver_server_runtime_conf_file=${CB_SERVER_WORKSPACELOCATION}/.data/.cloudbeaver.runtime.conf
#if [[ ! -f ${cloudbeaver_server_runtime_conf_file} ]] ; then
echo \
"// this file is written by s6 (via /etc/services.d/cloudbeaver/run)
{
    server: {
        workspaceLocation: \"${CB_SERVER_WORKSPACELOCATION:-workspace}\",
        rootURI: \"${CB_SERVER_ROOTURI:-/cloudbeaver}\",
        serviceURI: \"${CB_SERVER_SERVICEURI:-/api/}\",
        expireSessionAfterPeriod: ${CB_SERVER_EXPIRESESSIONAFTERPERIOD:-3600000}
    },
    app: {
        anonymousAccessEnabled: ${CB_APP_ANONYMOUSACCESSENABLED:-true},
        anonymousAccessAllowed: ${CB_APP_ANONYMOUSACCESSENABLED:-true},
        anonymousUserRole: \"${CB_APP_ANONYMOUSUSERROLE:-admin}\",
        supportsCustomConnections: ${CB_APP_SUPPORTSCUSTOMCONNECTIONS:-true},
        publicCredentialsSaveEnabled: ${CB_APP_PUBLICCREDENTIALSSAVEENABLED:-true},
        adminCredentialsSaveEnabled: ${CB_APP_ADMINCREDENTIALSSAVEENABLED:-true},
        defaultNavigatorSettings: {},
        enabledAuthProviders: [
            \"local\",
            \"reverseProxy\"
        ],
        authConfigurations: [
            {
                id: \"caddy_reverse_proxy\",
                provider: \"reverseProxy\",
                displayName: \"Caddy\"
            }
        ]
    }
}
" | tee ${cloudbeaver_server_runtime_conf_file} #${CLOUDBEAVER_HOME}/conf/.cloudbeaver.runtime.conf
#fi

# populate the .product.runtime.conf file
cloudbeaver_product_runtime_conf_file=${CB_SERVER_WORKSPACELOCATION}/.data/.product.runtime.conf
sed -E -i 's|defaultTheme: .*|defaultTheme: "dark",|g' ${CB_PRODUCT_CONF_FILE}


if [[ ! -f ${cloudbeaver_product_runtime_conf_file} ]] ; then
echo \
"// this file is written by s6 (via /etc/services.d/cloudbeaver/run)
{
    core: {
        // User defaults
        user: {
            defaultTheme: \"dark\",
            defaultLanguage: \"en\"
        },
        authentication: {
            baseAuthProvider: \"reverseProxy\",
            primaryAuthProvider: \"reverseProxy\"
        },
        theming: {
            defaultTheme: \"dark\"
        },
        app: {
            // Log viewer config
            logViewer: {
                refreshTimeout: 3000,
                logBatchSize: 1000,
                maxLogRecords: 2000,
                maxFailedRequests: 3
            },
            navigationTree: {
                childrenLimit: 10000
            }
        }
    },
    plugin: {
        'data-spreadsheet': {
            hidden: false
        },
        'data_export': {
            disabled: false
        },
        'notifications': {
            notificationsPool: 5
        }
    }
}
" > ${cloudbeaver_product_runtime_conf_file}
fi
# CB likes to ignore the runtime files, so let's push them into the default product conf too
cat ${cloudbeaver_product_runtime_conf_file} > ${CB_PRODUCT_CONF_FILE}

# populate initial data sources on first run
cd ${CLOUDBEAVER_HOME} \
&& [ ! -d "${CB_SERVER_WORKSPACELOCATION}/.metadata" ] \
&& mkdir -p ${CB_SERVER_WORKSPACELOCATION}/GlobalConfiguration/.dbeaver \
&& cp -n ${CLOUDBEAVER_HOME}/conf/initial-data-sources.conf ${CB_SERVER_WORKSPACELOCATION}/GlobalConfiguration/.dbeaver/data-sources.json

# mkdir -p ${CB_SERVER_WORKSPACELOCATION}
# chown -R ${USER_NAME:-liveware}:${GROUP_NAME:-liveware} ${CB_SERVER_WORKSPACELOCATION}
# chown -R ${USER_NAME:-liveware}:${GROUP_NAME:-liveware} ${CLOUDBEAVER_HOME}
# chown -R ${USER_NAME}:${GROUP_NAME} ${user_workspacelocation} 
chown -R ${USER_NAME}:${GROUP_NAME} ${user_workspacelocation}
chown -R ${USER_NAME}:${GROUP_NAME} ${CB_SERVER_WORKSPACELOCATION}
chown -R ${USER_NAME}:${GROUP_NAME} ${CLOUDBEAVER_HOME}

# build command
export CB_LAUNCHER_JAR=( ${CLOUDBEAVER_HOME}/server/plugins/org.jkiss.dbeaver.launcher*.jar )
export COMMAND_ARGS=\
" -jar "${CB_CLI_ARGS_JAR:-" ${CB_LAUNCHER_JAR} "}\
" -product "${CB_CLI_ARGS_PRODUCT:-" io.cloudbeaver.product.ce.product "}\
" -web-config "${CB_CLI_ARGS_WEB_CONFIG:-" ${CLOUDBEAVER_HOME}/conf/cloudbeaver.conf "}\
" -nl "${CB_CLI_ARGS_:-" en "}\
" -registryMultiLanguage "${CB_CLI_ARGS_:-""}\
" -vmargs "${CB_CLI_ARGS_VMARGS:-" -Xmx2048M "}\
${CB_CLI_ARGS_ADDITIONAL_ARGS}

COMMAND=" \
export CB_SERVER_NAME=${CB_SERVER_NAME} \
export CB_SERVER_URL=${CB_SERVER_URL} \
export CB_ADMIN_NAME='${CB_ADMIN_NAME}' \
export CB_ADMIN_PASSWORD='${CB_ADMIN_PASSWORD}' \
&& cd ${CLOUDBEAVER_HOME} \
&& java $( echo -n ${COMMAND_ARGS} ) "


su - ${USER_NAME} -c "{
  echo [\"$(date +%Y-%m-%dT%H:%M:%S%z)\"] info s6-${DISPLAY_NAME} user:     "'$(id)'" \
; echo [\"$(date +%Y-%m-%dT%H:%M:%S%z)\"] info s6-${DISPLAY_NAME}' command: '\"${COMMAND}\" \
; ${COMMAND} \
; }"



# export CB_SERVER_NAME=CloudBeaver \
# export CB_SERVER_URL=http://localhost:8978 \
# export CB_ADMIN_NAME='liveware' \
# export CB_ADMIN_PASSWORD='password' \
# && cd /opt/cloudbeaver \
# && java -jar /opt/cloudbeaver/server/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar -product io.cloudbeaver.product.ce.product -web-config /opt/cloudbeaver/conf/cloudbeaver.conf -nl en -registryMultiLanguage -vmargs -Xmx2048M 