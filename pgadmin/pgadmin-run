#!/bin/bash

# grab the username
source /etc/profile.d/0000-env.sh
eval $(cat /etc/cont-init.d/001-userconf.sh  | grep -E "^export USER_NAME" | envsubst)

export PGADMIN_BASE_DIR=${PGADMIN_BASE_DIR:='/usr/local/pgadmin'}
export PGADMIN_DIR=${PGADMIN_DIR:=${PGADMIN_BASE_DIR}"/pgadmin4"}
# Set the default username and password in a
# backwards compatible way
export PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:='admin@example.com'}
export PGADMIN_SETUP_EMAIL=${PGADMIN_DEFAULT_EMAIL:='admin@example.com'}
export PGADMIN_SETUP_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:=${PASSWORD}}

# setup config_distro.py
config_distro_path=${PGADMIN_DIR}/config_distro.py
touch ${config_distro_path}
chown -R ${USER_NAME:=liveware}:${GROUP_NAME:=liveware} ${config_distro_path}

echo "

import os

CA_FILE = '/etc/ssl/certs/ca-certificates.crt'
LOG_FILE = '/dev/null'
HELP_PATH = '../../docs'
DEFAULT_BINARY_PATHS = {
        'pg': '/usr/local/pgsql/pgsql-13',
        'pg-13': '/usr/local/pgsql/pgsql-13',
        'pg-12': '/usr/local/pgsql/pgsql-12',
        'pg-11': '/usr/local/pgsql/pgsql-11',
        'pg-10': '/usr/local/pgsql/pgsql-10',
        'pg-9.6': '/usr/local/pgsql/pgsql-9.6'
}

MASTER_PASSWORD_REQUIRED = False
DATA_DIR        = os.path.join( os.environ['XDG_DATA_HOME'], 'pgadmin4' )
SQLITE_PATH     = os.path.join( DATA_DIR , 'pgadmin4.db' ) 
SESSION_DB_PATH = os.path.join(DATA_DIR, 'sessions')
STORAGE_DIR     = os.environ['HOME']
ENABLE_PSQL = True
SERVER_MODE = False
UPGRADE_CHECK_ENABLED = False
LOG_FILE = os.path.join(DATA_DIR, 'pgadmin4.log')
DESKTOP_USER = ${PGADMIN_DEFAULT_EMAIL}

# Number of values to trust for X-Forwarded-For
PROXY_X_FOR_COUNT = 10
PROXY_X_PROTO_COUNT = 10
PROXY_X_HOST_COUNT = 10
PROXY_X_PORT_COUNT = 10
PROXY_X_PREFIX_COUNT = 10
X_FRAME_OPTIONS = ''

" > ${config_distro_path}

# propagate PGADMIN_CONFIG_* env vars to config_ditro.py
for var in $(env | grep PGADMIN_CONFIG_ | cut -d "=" -f 1); do
    echo "${var##PGADMIN_CONFIG_} = ${var}" >> ${config_distro_path}
    #echo ${var##PGADMIN_CONFIG_} = $(eval "echo \$$var") >> ${config_distro_path}
done

# config_local.py may be redundant for us...
#config_local_path=${PGADMIN_DIR}/config_local.py

# Initialize DB before starting Gunicorn
# Importing pgadmin4 (from this script) is enough
#su - ${USER_NAME} -c "${PGADMIN_BASE_DIR}/venv/bin/python3 ${PGADMIN_DIR}/run_pgadmin.py"


TIMEOUT=${PGADMIN_CONFIG_TIMEOUT:=86400}

# NOTE: currently pgadmin can run only with 1 worker due to sessions implementation
# Using --threads to have multi-threaded single-process worker
COMMAND="
cd ${PGADMIN_DIR} && \
${PGADMIN_BASE_DIR}/venv/bin/python ${PGADMIN_BASE_DIR}/venv/bin/gunicorn \
--timeout=${TIMEOUT:=86400} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--chdir ${PGADMIN_DIR} \
--pythonpath ${PGADMIN_DIR}:${PGADMIN_BASE_DIR}/venv \
-c ${PGADMIN_DIR}/gunicorn_config.py \
${PGADMIN_DIR}/run_pgadmin:app
"

su - ${USER_NAME} -c "
python ${PGADMIN_BASE_DIR}/venv/bin/gunicorn \
--timeout ${TIMEOUT} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--chdir ${PGADMIN_DIR} \
--pythonpath ${PGADMIN_DIR}:${PGADMIN_BASE_DIR}/venv \
-c ${PGADMIN_DIR}/gunicorn_config.py \
${PGADMIN_DIR}/run_pgadmin:app
"


${PGADMIN_BASE_DIR}/venv/bin/python \

COMMAND="
cd ${PGADMIN_DIR} && \
${PGADMIN_BASE_DIR}/venv/bin/gunicorn \
--timeout=${TIMEOUT:=86400} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--chdir ${PGADMIN_DIR} \
--pythonpath ${PGADMIN_DIR}:${PGADMIN_BASE_DIR}/venv \
-c ${PGADMIN_DIR}/gunicorn_config.py \
run_pgadmin:app
"

COMMAND="
cd ${PGADMIN_DIR} \
&& source bin/activate \
&& gunicorn \
--timeout=${TIMEOUT:=86400} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--pythonpath ${PGADMIN_DIR} \
-c ${PGADMIN_DIR}/gunicorn_config.py \
run_pgadmin:app
"

--chdir ${PGADMIN_DIR} \

apt-get update \
&& apt-get install -y \
musl-dev \
&& ln -s /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1
mkdir /var/lib/pgadmin
mkdir /var/log/pgadmin
chown -R liveware:liveware /var/log/pgadmin
chown -R liveware:liveware /var/lib/pgadmin
chown liveware:liveware /pgadmin4/config_distro.py

su - liveware
export DESKTOP_USER='admin@example.com'
export PGADMIN_SETUP_EMAIL='admin@example.com'
export PGADMIN_SETUP_PASSWORD='password'
export SERVER_MODE='False'
/venv/bin/python3 /pgadmin4/setup.py --user 'admin@example.com'
cd /pgadmin4
/venv/bin/python3 run_pgadmin.py
&& /venv/bin/gunicorn \
--timeout 86400 \
--bind 0.0.0.0:5050 \
-w 1 \
-e SCRIPT_NAME=/pgadmin \
--pythonpath=/pgadmin4 \
--threads 25 \
--access-logfile - \
-c gunicorn_config.py \
run_pgadmin:app

export DESKTOP_USER='admin@example.com'
export PGADMIN_SETUP_EMAIL='admin@example.com'
export PGADMIN_SETUP_PASSWORD='password'
export SERVER_MODE='False'
/venv/bin/python3 /pgadmin4/setup.py 
cd /pgadmin4 \
&& /venv/bin/python3 run_pgadmin.py \
&& /venv/bin/gunicorn \
--timeout 86400 \
--bind unix:/tmp/pgadmin4.sock \
-w 1 \
-e SCRIPT_NAME=/pgadmin \
--pythonpath=/pgadmin4 \
--threads 25 \
--access-logfile - \
-c gunicorn_config.py \
run_pgadmin:app

--bind 0.0.0.0:5050 \

unix//tmp/pgadmin4.sock


# export PGADMIN_SERVER_JSON_FILE=${PGADMIN_SERVER_JSON_FILE:=${PGADMIN_DIR}'/servers.json'}

# /venv/bin/python3 /pgadmin4/setup.py --load-servers "${PGADMIN_SERVER_JSON_FILE}"
#     # Pre-load any required servers
#     if [ -f "${PGADMIN_SERVER_JSON_FILE}" ]; then
#         # When running in Desktop mode, no user is created
#         # so we have to import servers anonymously
#         if [ "${PGADMIN_CONFIG_SERVER_MODE}" = "False" ]; then
#         else
#             /venv/bin/python3 /pgadmin4/setup.py --load-servers "${PGADMIN_SERVER_JSON_FILE}" --user ${PGADMIN_DEFAULT_EMAIL}
#         fi
#     fi
# fi










#/usr/local/pgadmin4/bin/gunicorn  --bind 0.0.0.0:5050           --workers=1           --threads=25           --chdir /usr/local/pgadmin4/lib/python3.9/site-packages/pgadmin4           pgAdmin4:app


#   && /usr/local/pgadmin4/bin/python /usr/local/pgadmin4/bin/gunicorn --timeout 86400 --bind :5050 -w 1 --threads 25 --access-logfile - run_pgadmin:app
# /pgadmin4/gunicorn_config.py 
# import gunicorn
# gunicorn.SERVER_SOFTWARE = 'Python'

# {gunicorn} /venv/bin/python3 /venv/bin/gunicorn --timeout 86400 --bind [::]:80 -w 1 --threads 25 --access-logfile - -c gunicorn_config.py run_pgadmin:app
# /usr/local/pgadmin4/bin/gunicorn  --bind 0.0.0.0:5050 \
#           --workers=1 \
#           --threads=25 \
#           --chdir /usr/local/pgadmin4/lib/python3.9/site-packages/pgadmin4 \
#           pgAdmin4:app
# /usr/local/pgadmin4/bin/gunicorn  --bind 0.0.0.0:5050           --workers=1           --threads=25           --chdir /usr/local/pgadmin4/lib/python3.9/site-packages/pgadmin4           pgAdmin4:app






