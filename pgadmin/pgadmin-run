#!/bin/bash

# grab the username
source /etc/profile.d/0000-env.sh
eval $(cat /etc/cont-init.d/001-userconf.sh  | grep -E "^export USER_NAME" | envsubst)







# Install the public key for the repository (if not done previously):
RUN curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add \
    && echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list \
    && apt-get update \
    && apt-get install -y \
    pgadmin4 \
    pgadmin4-web \
    gunicorn \
    musl-dev \
    apache2 \
    apache2-dev \
    libapache2-mod-wsgi

ln -s /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1

libapache2-mod-wsgi-py3







<VirtualHost *>
    ServerName pgadmin.example.com

    WSGIDaemonProcess pgadmin processes=1 threads=25 python-home=/path/to/python/virtualenv
    WSGIScriptAlias / /usr/pgadmin4/web/pgAdmin4.wsgi

    <Directory /usr/pgadmin4/web>
        WSGIProcessGroup pgadmin
        WSGIApplicationGroup %{GLOBAL}
        Require all granted
    </Directory>
</VirtualHost>




APACHE_RUN_DIR
/etc/apache2/apache2.conf
/etc/apache2/apache2.conf
# This is the main Apache server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See http://httpd.apache.org/docs/2.4/ for detailed information about
# the directives and /usr/share/doc/apache2/README.Debian about Debian specific
# hints.
#
#
# Summary of how the Apache 2 configuration works in Debian:
# The Apache 2 web server configuration in Debian is quite different to
# upstream's suggested way to configure the web server. This is because Debian's
# default Apache2 installation attempts to make adding and removing modules,
# virtual hosts, and extra configuration directives as flexible as possible, in
# order to make automating the changes and administering the server as easy as
# possible.

# It is split into several files forming the configuration hierarchy outlined
# below, all located in the /etc/apache2/ directory:
#
#       /etc/apache2/
#       |-- apache2.conf
#       |       `--  ports.conf
#       |-- mods-enabled
#       |       |-- *.load
#       |       `-- *.conf
#       |-- conf-enabled
#       |       `-- *.conf
#       `-- sites-enabled
#               `-- *.conf
#
#
# * apache2.conf is the main configuration file (this file). It puts the pieces
#   together by including all remaining configuration files when starting up the
#   web server.
#
# * ports.conf is always included from the main configuration file. It is
#   supposed to determine listening ports for incoming connections which can be
#   customized anytime.
#
# * Configuration files in the mods-enabled/, conf-enabled/ and sites-enabled/
#   directories contain particular configuration snippets which manage modules,
#   global configuration fragments, or virtual host configurations,
#   respectively.
#
#   They are activated by symlinking available configuration files from their
#   respective *-available/ counterparts. These should be managed by using our
#   helpers a2enmod/a2dismod, a2ensite/a2dissite and a2enconf/a2disconf. See
#   their respective man pages for detailed information.
#
# * The binary is called apache2. Due to the use of environment variables, in
#   the default configuration, apache2 needs to be started/stopped with
#   /etc/init.d/apache2 or apache2ctl. Calling /usr/bin/apache2 directly will not
#   work with the default configuration.


# Global configuration
#

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# NOTE!  If you intend to place this on an NFS (or otherwise network)
# mounted filesystem then please read the Mutex documentation (available
# at <URL:http://httpd.apache.org/docs/2.4/mod/core.html#mutex>);
# you will save yourself a lot of trouble.
#
# Do NOT add a slash at the end of the directory path.
#
#ServerRoot "/etc/apache2"

#
# The accept serialization lock file MUST BE STORED ON A LOCAL DISK.
#
#Mutex file:${APACHE_LOCK_DIR} default

#
# The directory where shm and other runtime files will be stored.
#

DefaultRuntimeDir ${APACHE_RUN_DIR}

#
# PidFile: The file in which the server should record its process
# identification number when it starts.
# This needs to be set in /etc/apache2/envvars
#
PidFile ${APACHE_PID_FILE}

#
# Timeout: The number of seconds before receives and sends time out.
#
Timeout 300

#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
KeepAlive On

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 100

#
# KeepAliveTimeout: Number of seconds to wait for the next request from the
# same client on the same connection.
#
KeepAliveTimeout 5


# These need to be set in /etc/apache2/envvars
User ${APACHE_RUN_USER}
Group ${APACHE_RUN_GROUP}

#
# HostnameLookups: Log the names of clients or just their IP addresses
# e.g., www.apache.org (on) or 204.62.129.132 (off).
# The default is off because it'd be overall better for the net if people
# had to knowingly turn this feature on, since enabling it means that
# each client request will result in AT LEAST one lookup request to the
# nameserver.
#
HostnameLookups Off

# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog ${APACHE_LOG_DIR}/error.log

#
# LogLevel: Control the severity of messages logged to the error_log.
# Available values: trace8, ..., trace1, debug, info, notice, warn,
# error, crit, alert, emerg.
# It is also possible to configure the log level for particular modules, e.g.
# "LogLevel info ssl:warn"
#
LogLevel warn

# Include module configuration:
IncludeOptional mods-enabled/*.load
IncludeOptional mods-enabled/*.conf

# Include list of ports to listen on
Include ports.conf


# Sets the default security model of the Apache2 HTTPD server. It does
# not allow access to the root filesystem outside of /usr/share and /var/www.
# The former is used by web applications packaged in Debian,
# the latter may be used for local directories served by the web server. If
# your system is serving content from a sub-directory in /srv you must allow
# access here, or in any related virtual host.
<Directory />
        Options FollowSymLinks
        AllowOverride None
        Require all denied
</Directory>

<Directory /usr/share>
        AllowOverride None
        Require all granted
</Directory>

<Directory /var/www/>
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
</Directory>

#<Directory /srv/>
#       Options Indexes FollowSymLinks
#       AllowOverride None
#       Require all granted
#</Directory>




# AccessFileName: The name of the file to look for in each directory
# for additional configuration directives.  See also the AllowOverride
# directive.
#
AccessFileName .htaccess

#
# The following lines prevent .htaccess and .htpasswd files from being
# viewed by Web clients.
#
<FilesMatch "^\.ht">
        Require all denied
</FilesMatch>


#
# The following directives define some format nicknames for use with
# a CustomLog directive.
#
# These deviate from the Common Log Format definitions in that they use %O
# (the actual bytes sent including headers) instead of %b (the size of the
# requested file), because the latter makes it impossible to detect partial
# requests.
#
# Note that the use of %{X-Forwarded-For}i instead of %h is not recommended.
# Use mod_remoteip instead.
#
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %O" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

# Include of directories ignores editors' and dpkg's backup files,
# see README.Debian for details.

# Include generic snippets of statements
IncludeOptional conf-enabled/*.conf

# Include the virtual host configurations:
IncludeOptional sites-enabled/*.conf

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet





















































export PGADMIN_BASE_DIR=${PGADMIN_BASE_DIR:='/usr/local/pgadmin'}
export PGADMIN_DIR=${PGADMIN_DIR:=${PGADMIN_BASE_DIR}"/pgadmin4"}
# Set the default username and password in a
# backwards compatible way
export PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:='admin@example.com'}
export PGADMIN_SETUP_EMAIL=${PGADMIN_DEFAULT_EMAIL:='admin@example.com'}
export PGADMIN_SETUP_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:=${PASSWORD}}

# setup config_distro.py
config_distro_path=${PGADMIN_DIR}/config_distro.py
touch ${config_distro_path}
chown -R ${USER_NAME:=liveware}:${GROUP_NAME:=liveware} ${config_distro_path}

echo "

import os

CA_FILE = '/etc/ssl/certs/ca-certificates.crt'
LOG_FILE = '/dev/null'
HELP_PATH = '../../docs'
DEFAULT_BINARY_PATHS = {
        'pg': '/usr/local/pgsql/pgsql-13',
        'pg-13': '/usr/local/pgsql/pgsql-13',
        'pg-12': '/usr/local/pgsql/pgsql-12',
        'pg-11': '/usr/local/pgsql/pgsql-11',
        'pg-10': '/usr/local/pgsql/pgsql-10',
        'pg-9.6': '/usr/local/pgsql/pgsql-9.6'
}

MASTER_PASSWORD_REQUIRED = False
DATA_DIR        = os.path.join( os.environ['XDG_DATA_HOME'], 'pgadmin4' )
SQLITE_PATH     = os.path.join( DATA_DIR , 'pgadmin4.db' ) 
SESSION_DB_PATH = os.path.join(DATA_DIR, 'sessions')
STORAGE_DIR     = os.environ['HOME']
ENABLE_PSQL = True
SERVER_MODE = False
UPGRADE_CHECK_ENABLED = False
LOG_FILE = os.path.join(DATA_DIR, 'pgadmin4.log')
DESKTOP_USER = ${PGADMIN_DEFAULT_EMAIL}

# Number of values to trust for X-Forwarded-For
PROXY_X_FOR_COUNT = 10
PROXY_X_PROTO_COUNT = 10
PROXY_X_HOST_COUNT = 10
PROXY_X_PORT_COUNT = 10
PROXY_X_PREFIX_COUNT = 10
X_FRAME_OPTIONS = ''

" > ${config_distro_path}

# propagate PGADMIN_CONFIG_* env vars to config_ditro.py
for var in $(env | grep PGADMIN_CONFIG_ | cut -d "=" -f 1); do
    echo "${var##PGADMIN_CONFIG_} = ${var}" >> ${config_distro_path}
    #echo ${var##PGADMIN_CONFIG_} = $(eval "echo \$$var") >> ${config_distro_path}
done

# config_local.py may be redundant for us...
#config_local_path=${PGADMIN_DIR}/config_local.py

# Initialize DB before starting Gunicorn
# Importing pgadmin4 (from this script) is enough
#su - ${USER_NAME} -c "${PGADMIN_BASE_DIR}/venv/bin/python3 ${PGADMIN_DIR}/run_pgadmin.py"


TIMEOUT=${PGADMIN_CONFIG_TIMEOUT:=86400}

# NOTE: currently pgadmin can run only with 1 worker due to sessions implementation
# Using --threads to have multi-threaded single-process worker
COMMAND="
cd ${PGADMIN_DIR} && \
${PGADMIN_BASE_DIR}/venv/bin/python ${PGADMIN_BASE_DIR}/venv/bin/gunicorn \
--timeout=${TIMEOUT:=86400} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--chdir ${PGADMIN_DIR} \
--pythonpath ${PGADMIN_DIR}:${PGADMIN_BASE_DIR}/venv \
-c ${PGADMIN_DIR}/gunicorn_config.py \
${PGADMIN_DIR}/run_pgadmin:app
"

su - ${USER_NAME} -c "
python ${PGADMIN_BASE_DIR}/venv/bin/gunicorn \
--timeout ${TIMEOUT} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--chdir ${PGADMIN_DIR} \
--pythonpath ${PGADMIN_DIR}:${PGADMIN_BASE_DIR}/venv \
-c ${PGADMIN_DIR}/gunicorn_config.py \
${PGADMIN_DIR}/run_pgadmin:app
"


${PGADMIN_BASE_DIR}/venv/bin/python \

COMMAND="
cd ${PGADMIN_DIR} && \
${PGADMIN_BASE_DIR}/venv/bin/gunicorn \
--timeout=${TIMEOUT:=86400} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--chdir ${PGADMIN_DIR} \
--pythonpath ${PGADMIN_DIR}:${PGADMIN_BASE_DIR}/venv \
-c ${PGADMIN_DIR}/gunicorn_config.py \
run_pgadmin:app
"

COMMAND="
cd ${PGADMIN_DIR} \
&& source bin/activate \
&& gunicorn \
--timeout=${TIMEOUT:=86400} \
--bind ${PGADMIN_LISTEN_ADDRESS:-[::]}:${PGADMIN_LISTEN_PORT:-5050} \
-w 1 \
--threads ${GUNICORN_THREADS:-25} \
--access-logfile ${GUNICORN_ACCESS_LOGFILE:--} \
--pythonpath ${PGADMIN_DIR} \
-c ${PGADMIN_DIR}/gunicorn_config.py \
run_pgadmin:app
"

--chdir ${PGADMIN_DIR} \

docker run -d -i -t --gpus all -p 80:80 -p 5051:5050 --name ide ericsgagnon/ide:dev

docker run -p 80:80 \
    -e 'PGADMIN_DEFAULT_EMAIL=user@domain.com' \
    -e 'PGADMIN_DEFAULT_PASSWORD=SuperSecret' \
    -e 'PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True' \
    -e 'PGADMIN_CONFIG_LOGIN_BANNER="Authorised users only!"' \
    -e 'PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=10' \
    -d dpage/pgadmin4


apt-get update \
&& apt-get install -y \
musl-dev \
&& ln -s /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1
mkdir /var/lib/pgadmin
mkdir /var/log/pgadmin
chown -R liveware:liveware /var/log/pgadmin
chown -R liveware:liveware /var/lib/pgadmin
chown liveware:liveware /pgadmin4/config_distro.py

su - liveware
export DESKTOP_USER='admin@example.com'
export PGADMIN_SETUP_EMAIL='admin@example.com'
export PGADMIN_SETUP_PASSWORD='password'
export SERVER_MODE='False'
/venv/bin/python3 /pgadmin4/setup.py --user 'admin@example.com'
cd /pgadmin4
/venv/bin/python3 run_pgadmin.py
&& /venv/bin/gunicorn \
--timeout 86400 \
--bind 0.0.0.0:5050 \
-w 1 \
-e SCRIPT_NAME=/pgadmin \
--pythonpath=/pgadmin4 \
--threads 25 \
--access-logfile - \
-c gunicorn_config.py \
run_pgadmin:app

export DESKTOP_USER='admin@example.com'
export PGADMIN_SETUP_EMAIL='admin@example.com'
export PGADMIN_DEFAULT_EMAIL=${PGADMIN_SETUP_EMAIL}
export PGADMIN_SETUP_PASSWORD='password'
export SERVER_MODE='False'
echo "

CA_FILE = '/etc/ssl/certs/ca-certificates.crt'
LOG_FILE = '/dev/null'
DEFAULT_BINARY_PATHS = {
        'pg': '/usr/local/pgsql/pgsql-13',
        'pg-13': '/usr/local/pgsql/pgsql-13',
        'pg-12': '/usr/local/pgsql/pgsql-12',
        'pg-11': '/usr/local/pgsql/pgsql-11',
        'pg-10': '/usr/local/pgsql/pgsql-10',
        'pg-9.6': '/usr/local/pgsql/pgsql-9.6'
}

# MASTER_PASSWORD_REQUIRED = False
# DATA_DIR        = os.path.join( os.environ['XDG_DATA_HOME'], 'pgadmin4' )
# SQLITE_PATH     = os.path.join( DATA_DIR , 'pgadmin4.db' ) 
# SESSION_DB_PATH = os.path.join(DATA_DIR, 'sessions')
# STORAGE_DIR     = os.environ['HOME']
# ENABLE_PSQL = True
SERVER_MODE = False
# UPGRADE_CHECK_ENABLED = False
# LOG_FILE = os.path.join(DATA_DIR, 'pgadmin4.log')
DESKTOP_USER = '${PGADMIN_DEFAULT_EMAIL}'

# Number of values to trust for X-Forwarded-For
PROXY_X_FOR_COUNT = 10
PROXY_X_PROTO_COUNT = 10
PROXY_X_HOST_COUNT = 10
PROXY_X_PORT_COUNT = 10
PROXY_X_PREFIX_COUNT = 10
# X_FRAME_OPTIONS = ''
SCRIPT_NAME = '/pgadmin'

" > config_distro.py

/venv/bin/python3 /pgadmin4/setup.py 
cd /pgadmin4 \
&& /venv/bin/python3 run_pgadmin.py \
&& /venv/bin/gunicorn \
--timeout 86400 \
--bind 0.0.0.0:5050 \
-w 1 \
-e SCRIPT_NAME=/pgadmin \
--pythonpath=/pgadmin4 \
--threads 25 \
--access-logfile - \
-c gunicorn_config.py \
run_pgadmin:app


--bind unix:/tmp/pgadmin4.sock \
# to unix//tmp/pgadmin4.sock


# export PGADMIN_SERVER_JSON_FILE=${PGADMIN_SERVER_JSON_FILE:=${PGADMIN_DIR}'/servers.json'}

# /venv/bin/python3 /pgadmin4/setup.py --load-servers "${PGADMIN_SERVER_JSON_FILE}"
#     # Pre-load any required servers
#     if [ -f "${PGADMIN_SERVER_JSON_FILE}" ]; then
#         # When running in Desktop mode, no user is created
#         # so we have to import servers anonymously
#         if [ "${PGADMIN_CONFIG_SERVER_MODE}" = "False" ]; then
#         else
#             /venv/bin/python3 /pgadmin4/setup.py --load-servers "${PGADMIN_SERVER_JSON_FILE}" --user ${PGADMIN_DEFAULT_EMAIL}
#         fi
#     fi
# fi










#/usr/local/pgadmin4/bin/gunicorn  --bind 0.0.0.0:5050           --workers=1           --threads=25           --chdir /usr/local/pgadmin4/lib/python3.9/site-packages/pgadmin4           pgAdmin4:app


#   && /usr/local/pgadmin4/bin/python /usr/local/pgadmin4/bin/gunicorn --timeout 86400 --bind :5050 -w 1 --threads 25 --access-logfile - run_pgadmin:app
# /pgadmin4/gunicorn_config.py 
# import gunicorn
# gunicorn.SERVER_SOFTWARE = 'Python'

# {gunicorn} /venv/bin/python3 /venv/bin/gunicorn --timeout 86400 --bind [::]:80 -w 1 --threads 25 --access-logfile - -c gunicorn_config.py run_pgadmin:app
# /usr/local/pgadmin4/bin/gunicorn  --bind 0.0.0.0:5050 \
#           --workers=1 \
#           --threads=25 \
#           --chdir /usr/local/pgadmin4/lib/python3.9/site-packages/pgadmin4 \
#           pgAdmin4:app
# /usr/local/pgadmin4/bin/gunicorn  --bind 0.0.0.0:5050           --workers=1           --threads=25           --chdir /usr/local/pgadmin4/lib/python3.9/site-packages/pgadmin4           pgAdmin4:app






python3 -m venv --system-site-packages --without-pip / && \
/venv/bin/python3 -m pip install --no-cache-dir -r requirements.txt

git clone https://github.com/postgres/pgadmin4

cd /usr/local/pgadmin4 \
&& python -m venv venv \
&& source venv/bin/activate \
&& cd venv \
&& wget https://raw.githubusercontent.com/postgres/pgadmin4/master/requirements.txt \
&& pip install -r requirements.txt \
&& pip install gunicorn \
&& cd /usr/local/pgadmin4 \
&& /usr/local/pgadmin4/venv/bin/gunicorn \
--timeout 86400 \
--bind 0.0.0.0:5050 \
-e SCRIPT_NAME=/pgadmin \
--pythonpath=/usr/local/pgadmin4 \
-w 1 \
--threads 25 \
--access-logfile - \
-c gunicorn_config.py \
run_pgadmin:app


/venv/bin/gunicorn --timeout 86400 --bind 0.0.0.0:5050 -w 1 --threads 25 --access-logfile - -c gunicorn_config.py run_pgadmin:app

su - liveware
sudo mkdir /var/lib/pgadmin
sudo mkdir /var/log/pgadmin
sudo chown -R liveware:liveware /var/log/pgadmin
sudo chown -R liveware:liveware /var/lib/pgadmin
sudo chown liveware:liveware /pgadmin4/config_distro.py

export PGADMIN_SETUP_EMAIL='admin@example.com'
export PGADMIN_SETUP_PASSWORD='password'
/venv/bin/python3 run_pgadmin.py
cd /pgadmin4 && /venv/bin/gunicorn --timeout 86400 --bind 0.0.0.0:5050 -w 1 --threads 25 --access-logfile - -c gunicorn_config.py run_pgadmin:app

docker run -d -i -t --gpus all -p 80:80 -p 5051:5050 --name ide ericsgagnon/ide:dev
