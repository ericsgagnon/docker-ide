#!/bin/bash

export DISPLAY_NAME="pgadmin"
# grab the username
source /etc/profile.d/0000-env.sh
eval $(cat /etc/cont-init.d/001-userconf.sh  | grep -E "^export USER_NAME" | envsubst)
eval $(cat /etc/cont-init.d/001-userconf.sh  | grep -E "^export GROUP_NAME" | envsubst)

# Set the default username and password
export PGADMIN_USER=${USER_NAME:=liveware}
export USER_EMAIL=${USER_EMAIL:=${PGADMIN_USER}'@localhost.com'}
export PGADMIN_EMAIL=${USER_EMAIL}
export PGADMIN_SETUP_EMAIL=${PGADMIN_EMAIL}
export PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}

export PGADMIN_PASSWORD=${PASSWORD:=password}
export PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
export PGADMIN_SETUP_EMAIL=${PGADMIN_EMAIL}
#export PGADMIN_SETUP_PASSWORD=${PGADMIN_PASSWORD}

export PGADMIN_DIR=${PGADMIN_DIR:="/usr/local/pgadmin4"}

export PGADMIN_DATA_DIR="$(su - ${USER_NAME} -c 'echo ${XDG_DATA_HOME}/pgadmin4')"
export PGADMIN_STORAGE_DIR=${PGADMIN_STORAGE_DIR:=${PGADMIN_DATA_DIR}/storage}
export PGADMIN_SQLITE_PATH=${PGADMIN_DATA_DIR}/pgadmin4.db
export PGADMIN_SESSION_DB_PATH=${PGADMIN_DATA_DIR}/sessions

export PGADMIN_LOG_DIR="/var/log/pgadmin"
export PGADMIN_LOG_FILE=${PGADMIN_LOG_DIR}"/pgadmin4.log"
PGADMIN_REMOTE_USER_HEADER=${PGADMIN_REMOTE_USER_HEADER:'REMOTE_USER'}

# setup config_distro.py
config_distro_path=${PGADMIN_DIR}/config_distro.py
touch ${config_distro_path}

echo "
LOG_FILE = '/dev/null'
DEFAULT_BINARY_PATHS = {
        'pg': '$(which psql)'
}

MASTER_PASSWORD_REQUIRED   = False
DATA_DIR                   = '${PGADMIN_DATA_DIR}'
SQLITE_PATH                = '${PGADMIN_SQLITE_PATH}'
SESSION_DB_PATH            = '${PGADMIN_SESSION_DB_PATH}'
STORAGE_DIR                = '${PGADMIN_STORAGE_DIR}'
ENABLE_PSQL                = True
SERVER_MODE                = True
UPGRADE_CHECK_ENABLED      = False
LOG_FILE                   = '${PGADMIN_LOG_FILE}'
DESKTOP_USER               = '${PGADMIN_DEFAULT_EMAIL}'
PGADMIN_DEFAULT_EMAIL      = '${PGADMIN_DEFAULT_EMAIL}'
PGADMIN_SETUP_EMAIL        = '${PGADMIN_DEFAULT_EMAIL}'
PGADMIN_DEFAULT_PASSWORD   = '${PGADMIN_PASSWORD}'
PGADMIN_SETUP_PASSWORD     = '${PGADMIN_PASSWORD}'
AUTHENTICATION_SOURCES     = 'webserver'
WEBSERVER_AUTO_CREATE_USER = True
REMOTE_USER_HEADER         = 'HTTP_REMOTE_USER'

# Number of values to trust for X-Forwarded-For
PROXY_X_FOR_COUNT    = 10
PROXY_X_PROTO_COUNT  = 10
PROXY_X_HOST_COUNT   = 10
PROXY_X_PORT_COUNT   = 10
PROXY_X_PREFIX_COUNT = 10
X_FRAME_OPTIONS = ''

" > ${config_distro_path}

# make webserver auth work with http headers:
# - gunicorn captures http headers in its environ as HTTP_{HEADER_NAME}
#    eg: Header REMOTE_USER is HTTP_REMOTE_USER
# - we're replacing the harcoded 
# - replace 'REMOTE_USER' environ with 
sed -i "s/'REMOTE_USER'/config.REMOTE_USER_HEADER/g" ${PGADMIN_DIR}/pgadmin/authentication/webserver.py


# propagate PGADMIN_CONFIG_* env vars to config_ditro.py
for var in $(env | grep PGADMIN_CONFIG_ | cut -d "=" -f 1); do
    echo "${var##PGADMIN_CONFIG_} = ${var}" >> ${config_distro_path}
    #echo ${var##PGADMIN_CONFIG_} = $(eval "echo \$$var") >> ${config_distro_path}
done

# Initialize DB before starting Gunicorn
# Importing pgadmin4 (from this script) is enough
#su - ${USER_NAME} -c "${PGADMIN_BASE_DIR}/venv/bin/python3 ${PGADMIN_DIR}/run_pgadmin.py"
mkdir -p ${PGADMIN_LOG_DIR}
chown -R ${USER_NAME}:${GROUP_NAME} ${PGADMIN_DIR}
chown -R ${USER_NAME}:${GROUP_NAME} ${PGADMIN_LOG_DIR}

COMMAND_ARGS="
--timeout 86400 \
--bind 0.0.0.0:5050 \
-e SCRIPT_NAME=/pgadmin \
-e REMOTE_USER=${PGADMIN_USER} \
--pythonpath=${PGADMIN_DIR} \
-w 1 \
--threads 25 \
--access-logfile - \
-c gunicorn_config.py \
run_pgadmin:app \
"

COMMAND=" \
export DESKTOP_USER='${PGADMIN_EMAIL}' \
export PGADMIN_DEFAULT_EMAIL='${PGADMIN_EMAIL}' \
export PGADMIN_SETUP_EMAIL='${PGADMIN_EMAIL}' \
export PGADMIN_DEFAULT_PASSWORD='${PGADMIN_PASSWORD}' \
export PGADMIN_SETUP_PASSWORD='${PGADMIN_PASSWORD}' \
export REMOTE_USER='${PGADMIN_EMAIL}' \
&& cd ${PGADMIN_DIR} \
&& source ${PGADMIN_DIR}/venv/bin/activate \
&& python /usr/local/pgadmin4/setup.py --user '${PGADMIN_SETUP_EMAIL}' \
&& ${PGADMIN_DIR}/venv/bin/gunicorn \
$(echo -n ${COMMAND_ARGS} ) "

su - ${USER_NAME} -c "{
  echo [\"$(date +%Y-%m-%dT%H:%M:%S%z)\"] info s6-${DISPLAY_NAME}' user:     '"'$(id)'" \
; echo [\"$(date +%Y-%m-%dT%H:%M:%S%z)\"] info s6-${DISPLAY_NAME}' command: '\"${COMMAND}\" \
; ${COMMAND} \
; }"

# su - ${USER_NAME} -c "
# export DESKTOP_USER=${PGADMIN_EMAIL}
# export PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
# export PGADMIN_SETUP_EMAIL=${PGADMIN_EMAIL}
# export PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
# export PGADMIN_SETUP_PASSWORD=${PGADMIN_PASSWORD}
# cd ${PGADMIN_DIR} \
# && source ${PGADMIN_DIR}/venv/bin/activate \
# && python /usr/local/pgadmin4/setup.py --user ${PGADMIN_SETUP_EMAIL} \
# && ${PGADMIN_DIR}/venv/bin/gunicorn \
# --timeout 86400 \
# --bind 0.0.0.0:5050 \
# -e SCRIPT_NAME=/pgadmin \
# --pythonpath=${PGADMIN_DIR} \
# -w 1 \
# --threads 25 \
# --access-logfile - \
# -c gunicorn_config.py \
# run_pgadmin:app
# "

'HTTP_REMOTE_USER': 'liveware'

{
  'wsgi.errors': <gunicorn.http.wsgi.WSGIErrorsWrapper object at 0x7f8b3e1601c0>, 
  'wsgi.version': (1, 0), 
  'wsgi.multithread': True, 
  'wsgi.multiprocess': False, 
  'wsgi.run_once': False, 
  'wsgi.file_wrapper': <class 'gunicorn.http.wsgi.FileWrapper'>, 
  'wsgi.input_terminated': True, 
  'SERVER_SOFTWARE': 'Python', 
  'wsgi.input': <gunicorn.http.body.Body object at 0x7f8b3e160220>, 
  'gunicorn.socket': <socket.socket fd=13, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 5050), raddr=('127.0.0.1', 43880)>, 
  'REQUEST_METHOD': 'GET', 
  'QUERY_STRING': '', 
  'RAW_URI': '/pgadmin/', 
  'SERVER_PROTOCOL': 'HTTP/1.1', 
  'HTTP_HOST': 'localhost', 
  'HTTP_USER_AGENT': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36', 
  'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9', 
  'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 
  'HTTP_ACCEPT_LANGUAGE': 'en-US,en;q=0.9', 
  'HTTP_REFERER': 'http://localhost/', 
  'HTTP_REMOTE_USER': 'liveware', 
  'HTTP_SEC_CH_UA': '"Google Chrome";v="95", "Chromium";v="95", ";Not A Brand";v="99"', 
  'HTTP_SEC_CH_UA_MOBILE': '?0', 
  'HTTP_SEC_CH_UA_PLATFORM': '"Linux"', 
  'HTTP_SEC_FETCH_DEST': 'document', 
  'HTTP_SEC_FETCH_MODE': 'navigate', 
  'HTTP_SEC_FETCH_SITE': 'same-origin', 
  'HTTP_SEC_FETCH_USER': '?1', 
  'HTTP_UPGRADE_INSECURE_REQUESTS': '1', 
  'HTTP_X_FORWARDED_FOR': '172.17.0.1', 
  'HTTP_X_FORWARDED_PREFIX': '/pgadmin', 
  'HTTP_X_FORWARDED_PROTO': 'http', 
  'HTTP_X_SCRIPT_NAME': '/pgadmin', 
  'wsgi.url_scheme': 'http', 
  'REMOTE_ADDR': '127.0.0.1', 
  'REMOTE_PORT': '43880', 
  'SERVER_NAME': '0.0.0.0', 'SERVER_PORT': '5050',
	'PATH_INFO': '/',
	'SCRIPT_NAME': '/pgadmin',
	'werkzeug.proxy_fix.orig': {
    'REMOTE_ADDR': '127.0.0.1',
		'wsgi.url_scheme': 'http',
		'HTTP_HOST': 'localhost',
		'SERVER_NAME': '0.0.0.0',
		'SERVER_PORT': '5050',
		'SCRIPT_NAME': '/pgadmin'
  }, 
  'flask.app': <PgAdmin 'pgadmin'>, 'eventlet.input': <engineio.middleware.WSGIApp.__call__.<locals>.Input object at 0x7f8b3e1602e0>, 